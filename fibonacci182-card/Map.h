uint16_t fibonacciCount = 318;

uint16_t physicalToFibonacci[NUM_LEDS] = { 0, 34, 68, 102, 136, 170, 204, 238, 293, 259, 225, 191, 157, 123, 89, 55, 21, 8, 42, 76, 110, 144, 178, 212, 246, 280, 233, 199, 165, 131, 97, 63, 29, 16, 50, 84, 118, 152, 186, 220, 254, 241, 207, 173, 139, 105, 71, 37, 3, 24, 58, 92, 126, 160, 194, 228, 262, 296, 317, 113, 79, 45, 11, 32, 66, 53, 19, 6, 40, 74, 61, 27, 14, 48, 82, 103, 69, 35, 1, 22, 56, 90, 124, 145, 111, 77, 43, 9, 30, 64, 98, 132, 166, 200, 221, 187, 153, 119, 85, 51, 17, 4, 38, 72, 106, 140, 174, 208, 242, 276, 263, 229, 195, 161, 127, 93, 59, 25, 12, 46, 80, 114, 148, 182, 216, 250, 237, 203, 169, 135, 101, 67, 33, 20, 54, 88, 122, 156, 190, 224, 258, 279, 245, 211, 177, 143, 109, 75, 41, 7, 28, 62, 96, 49, 15, 2, 36, 70, 57, 23, 10, 44, 78, 65, 31, 28, 52, 86, 107, 73, 39, 5, 26, 60, 94, 128, 183, 149, 115, 81, 47, 13 };
uint16_t fibonacciToPhysical[318] = { 0, 78, 155, 48, 101, 171, 67, 149, 17, 87, 160, 62, 118, 181, 72, 154, 33, 100, 182, 66, 133, 16, 79, 159, 49, 117, 172, 71, 150, 32, 88, 164, 63, 132, 1, 77, 156, 47, 102, 170, 68, 148, 18, 86, 161, 61, 119, 180, 73, 153, 34, 99, 166, 65, 134, 15, 80, 158, 50, 116, 173, 70, 151, 31, 89, 163, 64, 131, 2, 76, 157, 46, 103, 169, 69, 147, 19, 85, 162, 60, 120, 179, 74, 182, 35, 98, 167, 182, 135, 14, 81, 182, 51, 115, 174, 182, 152, 30, 90, 182, 182, 130, 3, 75, 182, 45, 104, 168, 182, 146, 20, 84, 182, 59, 121, 178, 182, 182, 36, 97, 182, 182, 136, 13, 82, 182, 52, 114, 175, 182, 182, 29, 91, 182, 182, 129, 4, 182, 182, 44, 105, 182, 182, 145, 21, 83, 182, 182, 122, 177, 182, 182, 37, 96, 182, 182, 137, 12, 182, 182, 53, 113, 182, 182, 182, 28, 92, 182, 182, 128, 5, 182, 182, 43, 106, 182, 182, 144, 22, 182, 182, 182, 123, 176, 182, 182, 38, 95, 182, 182, 138, 11, 182, 182, 54, 112, 182, 182, 182, 27, 93, 182, 182, 127, 6, 182, 182, 42, 107, 182, 182, 143, 23, 182, 182, 182, 124, 182, 182, 182, 39, 94, 182, 182, 139, 10, 182, 182, 55, 111, 182, 182, 182, 26, 182, 182, 182, 126, 7, 182, 182, 41, 108, 182, 182, 142, 24, 182, 182, 182, 125, 182, 182, 182, 40, 182, 182, 182, 140, 9, 182, 182, 56, 110, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 109, 182, 182, 141, 25, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 8, 182, 182, 57, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 58 };

byte coordsX[NUM_LEDS] = { 133, 174, 193, 206, 216, 223, 228, 231, 246, 244, 240, 234, 226, 216, 203, 187, 164, 149, 177, 196, 211, 223, 234, 243, 250, 255, 250, 240, 229, 216, 202, 186, 166, 152, 173, 190, 206, 219, 232, 244, 254, 245, 233, 220, 206, 192, 177, 160, 136, 147, 162, 176, 190, 203, 217, 230, 243, 255, 251, 172, 159, 147, 135, 135, 143, 129, 125, 122, 118, 120, 108, 111, 109, 99, 95, 82, 86, 94, 120, 96, 80, 72, 68, 54, 59, 67, 80, 104, 84, 66, 54, 46, 41, 38, 24, 28, 34, 43, 54, 70, 93, 110, 77, 59, 44, 33, 24, 17, 12, 9, 1, 7, 15, 25, 36, 50, 67, 88, 102, 77, 59, 44, 31, 19, 9, 0, 5, 16, 28, 41, 56, 72, 90, 104, 85, 70, 55, 41, 28, 15, 3, 5, 17, 30, 44, 57, 71, 85, 99, 117, 112, 101, 88, 115, 123, 128, 127, 122, 135, 135, 138, 146, 146, 157, 151, 151, 165, 170, 184, 178, 167, 143, 164, 181, 191, 198, 215, 211, 204, 194, 180, 156 };
byte coordsY[NUM_LEDS] = { 124, 117, 105, 88, 70, 49, 26, 3, 0, 24, 48, 69, 89, 106, 120, 130, 133, 139, 149, 147, 140, 128, 112, 94, 73, 50, 122, 139, 153, 163, 169, 169, 161, 162, 184, 192, 193, 189, 180, 168, 152, 199, 209, 216, 218, 216, 207, 190, 146, 186, 215, 232, 241, 245, 244, 239, 230, 218, 253, 255, 239, 214, 171, 205, 238, 230, 188, 160, 214, 248, 232, 194, 169, 211, 242, 247, 219, 187, 136, 163, 193, 220, 246, 239, 215, 191, 168, 141, 145, 163, 183, 205, 228, 251, 234, 211, 189, 169, 152, 137, 127, 119, 116, 123, 135, 151, 169, 190, 212, 236, 187, 165, 145, 128, 114, 104, 99, 102, 99, 82, 79, 82, 90, 103, 118, 136, 88, 74, 64, 57, 55, 60, 73, 74, 48, 36, 31, 31, 36, 44, 57, 24, 13, 7, 4, 5, 12, 24, 46, 89, 52, 21, 1, 25, 68, 102, 37, 4, 16, 56, 82, 34, 1, 21, 56, 81, 45, 15, 16, 42, 70, 106, 93, 69, 45, 21, 9, 33, 55, 76, 95, 113 };
byte angles[NUM_LEDS] = { 127, 124, 121, 118, 114, 111, 108, 104, 106, 110, 113, 116, 120, 123, 126, 130, 133, 141, 138, 135, 132, 128, 125, 122, 118, 115, 127, 130, 134, 137, 140, 143, 147, 155, 152, 149, 146, 142, 139, 136, 132, 141, 144, 148, 151, 154, 158, 161, 162, 169, 166, 163, 160, 156, 153, 150, 146, 143, 149, 168, 172, 175, 177, 183, 180, 189, 192, 200, 198, 195, 203, 206, 215, 212, 209, 214, 218, 221, 222, 230, 227, 223, 220, 225, 229, 232, 235, 238, 244, 241, 238, 234, 231, 228, 233, 236, 240, 243, 247, 250, 253, 8, 4, 0, 252, 249, 245, 242, 238, 235, 244, 247, 251, 254, 3, 6, 9, 13, 22, 18, 15, 11, 8, 5, 1, 253, 7, 10, 13, 17, 20, 24, 27, 36, 33, 29, 26, 22, 19, 16, 12, 18, 21, 24, 28, 31, 35, 38, 42, 46, 51, 47, 44, 56, 60, 71, 65, 61, 70, 74, 83, 79, 75, 84, 88, 97, 93, 89, 95, 98, 102, 106, 110, 107, 104, 100, 102, 106, 109, 112, 116, 119 };
byte radius[NUM_LEDS] = { 12, 85, 120, 146, 168, 187, 205, 221, 245, 231, 215, 199, 180, 160, 136, 108, 68, 43, 94, 126, 151, 173, 192, 209, 225, 240, 219, 203, 185, 165, 142, 115, 79, 59, 103, 132, 156, 177, 196, 213, 229, 223, 207, 189, 170, 147, 122, 88, 28, 71, 110, 138, 161, 182, 200, 217, 232, 247, 255, 152, 128, 97, 49, 81, 116, 104, 63, 36, 90, 123, 111, 74, 53, 98, 128, 144, 117, 83, 16, 66, 105, 134, 157, 170, 149, 124, 92, 42, 77, 112, 139, 162, 182, 200, 210, 193, 174, 154, 130, 100, 58, 28, 86, 119, 145, 167, 186, 204, 220, 235, 229, 214, 197, 179, 159, 136, 108, 70, 49, 95, 126, 150, 171, 190, 207, 223, 217, 201, 183, 164, 142, 115, 81, 63, 104, 132, 156, 176, 195, 211, 227, 236, 221, 205, 188, 169, 148, 123, 91, 38, 75, 112, 139, 100, 56, 23, 86, 119, 108, 69, 47, 96, 127, 116, 81, 63, 104, 133, 149, 123, 91, 35, 75, 112, 140, 163, 194, 176, 155, 130, 100, 54 };

uint16_t MATRIX_WIDTH = 256;
uint16_t MATRIX_HEIGHT = 256;

uint8_t thickness = 16;

// adds a color to a pixel given it's XY coordinates and a "thickness" of the logical pixel
// since we're using a sparse logical grid for mapping, there isn't an LED at every XY coordinate
// thickness adds a little "fuzziness"
void addColorXY(int x, int y, CRGB color, uint8_t thickness = 0)
{
  // ignore coordinates outside of our one byte map range
  if (x < 0 || x > 255 || y < 0 || y > 255) return;

  // loop through all of the LEDs
  for (uint8_t i = 0; i < NUM_LEDS; i++) {
    // get the XY coordinates of the current LED
    uint8_t ix = coordsX[i];
    uint8_t iy = coordsY[i];

    // are the current LED's coordinates within the square centered
    // at X,Y, with width and height of thickness?
    if (ix >= x - thickness && ix <= x + thickness &&
        iy >= y - thickness && iy <= y + thickness) {

      // add to the color instead of just setting it
      // so that colors blend
      // FastLED automatically prevents overflowing over 255
      leds[i] += color;
    }
  }
}
